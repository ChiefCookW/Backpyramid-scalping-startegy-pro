//@version=6
indicator('Enhanced TYKU-Q Scalping Strategy', overlay=true)

// Default values
var defTotalAmount = 4000
var defNumberOfEntryPoints = 4
var defMaxDrawdown = 80
var defLookbackPeriod = 120
var defEntryThreshold = 30  // Start buying only after a -30% drop
var defTP = 10  // Default number of units extra for TP

// Inputs
var totalAmount = input.int(title='Total Amount', defval=defTotalAmount, minval=0)
var numberOfEntryPoints = input.int(title='Number of entry points', defval=defNumberOfEntryPoints, minval=0, maxval=10)
var maxDrawdown = input.int(title='Max drawdown, %', defval=defMaxDrawdown, minval=0, maxval=100)
var lookbackPeriod = input.int(title='Lookback period in days', defval=defLookbackPeriod, minval=0, maxval=360)
var entryThreshold = input.int(title='Drawdown Start Threshold (%)', defval=defEntryThreshold, minval=0, maxval=100)
var takeProfitMultiplier = input.float(title='Take Profit units', defval=defTP, minval=1, maxval=10000)

var int rightEdgeBarIndex = na
if (bar_index % 10 == 0) 
    rightEdgeBarIndex := bar_index

highestHigh = ta.highest(high, lookbackPeriod)

_draw_line(price, col) =>
    id = line.new(rightEdgeBarIndex - 500, price, rightEdgeBarIndex, price, color=col, width=1, extend=extend.right)

draw_take_profit(price) =>
    takeProfitPrice = price + 15
    _draw_line(takeProfitPrice, color.green)
    //label.new(x=rightEdgeBarIndex, y=takeProfitPrice, text='Take Profit: ' + str.tostring(takeProfitPrice, format.mintick), textcolor=color.green)

// Calculate step size for retracement levels
maxDrawdownPercentage = 1 - maxDrawdown / 100.0
entryThresholdPercentage = 1 - entryThreshold / 100.0
rangeTop = highestHigh*entryThresholdPercentage
rangeBottom = highestHigh*maxDrawdownPercentage
stepSize = (rangeTop - rangeBottom) / (numberOfEntryPoints - 1)

// Draw retracement levels and entry points
_draw_retracement(startPrice, endPrice) =>
    if barstate.islast
        for i = 0 to numberOfEntryPoints - 1
            level = i * stepSize
            price = math.round(startPrice - level, 2)
            
            // if price > highestHigh * (1 - entryThresholdPercentage)
            //     continue  // Skip buying if price hasn't dropped enough

            
            _draw_line(price, color.aqua)
            oneBuyinSize = defTotalAmount/defNumberOfEntryPoints
            takeProfitPrice = price * takeProfitMultiplier
            tekstas = 'Entry: ' + str.tostring(price, format.mintick) + ' Take Profit: ' + str.tostring(takeProfitPrice, format.mintick) + ' Buyinsize: ' + str.tostring(oneBuyinSize)
            label.new(x=rightEdgeBarIndex, y=price, text=tekstas, textcolor=color.white)
            //draw_take_profit(price)  // Automatically set take profit levels

_draw_retracement(rangeTop, rangeBottom)